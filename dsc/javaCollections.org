#+title: dsc in java
* ArrayList
** 小细节
*** modCount
用于非线程安全的集合于迭代器的fail-fast机制
*** transient 关键字
被transient修饰的属性在反序列化的时候会被赋值出默认值
在ArrayList中的作用，自定义序列化方法，节省空间，避免序列化数组的空值
** 方法
*** 无参初始化确实是空数组
#+BEGIN_SRC java
  private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};
  //add元素的时候 会将默认数组扩容到10，为啥要多这么个判断?贪心原理，一点不想浪费，抠！！
  public void ensureCapacity(int minCapacity) {
          int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)
              // any size if not default element table
              ? 0
              // larger than default for default empty table. It's already
              // supposed to be at default size.
              : DEFAULT_CAPACITY;

          if (minCapacity > minExpand) {
              ensureExplicitCapacity(minCapacity);
          }
      }
#+END_SRC
*** add
不妨关心一下arraycopy的使用方法，思考一下它是怎么进行数组复制的，尤其是目标和当前是同一个数组
#+BEGIN_SRC java
  public void add(int index, E element) {
          rangeCheckForAdd(index);

          ensureCapacityInternal(size + 1);  // Increments modCount!!
          System.arraycopy(elementData, index, elementData, index + 1,
                           size - index); // 从自身的index开始复制到自身的index+1开始，这么用也行啊
          elementData[index] = element;
          size++;
      }
#+END_SRC
*** trimToSize
删除比重大的场景下不妨调用这个来让null有机会被回收
#+BEGIN_SRC java
  /**
       ,* 将底层数组的容量调整为当前实际元素的大小，来释放空间。
       ,*/
      public void trimToSize() {
          modCount++;
         // 当前数组的容量
          int oldCapacity = elementData .length;
         // 如果当前实际元素大小 小于 当前数组的容量，则进行缩容
          if (size < oldCapacity) {
              elementData = Arrays.copyOf( elementData, size );
         }
#+END_SRC
*** 带Collection对象的构造函数
深拷贝，可以避免两个引用（指针）指向同一个对象，也避免了不必要的内存泄漏
但是这里采用的是浅拷贝
#+BEGIN_SRC java
  public ArrayList(Collection<? extends E> c) {
      elementData = c.toArray();
      if ((size = elementData.length) != 0) {
          // c.toArray might (incorrectly) not return Object[] (see 6260652)
          if (elementData.getClass() != Object[].class)
              //这里如果直接element = c.toArray 那构造出来的ArrayList的element就不一定是Object[]
              elementData = Arrays.copyOf(elementData, size, Object[].class);
      } else {
          // replace with empty array.
          this.elementData = EMPTY_ELEMENTDATA;
      }
  }

#+END_SRC

---------------------

本文来自 Fighter168 的CSDN 博客 ，全文地址请点击：https://blog.csdn.net/fighterandknight/article/details/61240861?utm_source=copy 
* LinkedList
** 双向链表，1.6是循环链 有header指针 1.7以后去掉了header指针，不再是循环
** Linkedlist怎么保证安全的错误提示机制
** SplitIterator
Spliterator是Java 8引入的新接口，顾名思义，Spliterator可以理解为Iterator的Split版本（但用途要丰富很多）。
使用Iterator的时候，我们可以顺序地遍历容器中的元素，使用Spliterator的时候，我们可以将元素分割成多份
，分别交于不于的线程去遍历，以提高效率。使用 Spliterator 每次可以处理某个元素集合中的一个元素 
— 不是从 Spliterator 中获取元素，而是使用 tryAdvance() 或 forEachRemaining() 方法对元素应用操作。
但 Spliterator 还可以用于估计其中保存的元素数量，而且还可以像细胞分裂一样变为一分为二。
这些新增加的能力让流并行处理代码可以很方便地将工作分布到多个可用线程上完成。
* Iterator
iterator的rm方法会更新expectedModCount值，这也就是为啥持有迭代器的时候，只可以用Iterator的remove方法
* HashMap
** TreeNode
*** 左旋
x 节点的左旋就是把 x 变成 右孩子 y 的左孩子，同时把 y 的左孩子送给 x 当右子树。
#+BEGIN_SRC java
  static <K,V> TreeNode<K,V> rotateLeft(TreeNode<K,V> root,
                                                TreeNode<K,V> p) {
              TreeNode<K,V> r, pp, rl;
              //左旋操作说的是图中的顶点
              if (p != null && (r = p.right) != null) {  //父节点p以及右孩子r不为空的前提下
                  if ((rl = p.right = r.left) != null) //如果r有做孩子rl 则把它p的右孩子上，此时p丢失了原来的右孩子r
                      rl.parent = p; //rl和p正式建立双方都承认的父子关系
                  if ((pp = r.parent = p.parent) == null) //丢失的r去找pp，想要成为pp的孩子
                      (root = r).red = false; //根节点规定成黑
                  else if (pp.left == p) //如果p不是root，下面四句是r代替p成为pp的孩子
                      pp.left = r; 
                  else 
                      pp.right = r;
                  r.left = p; //原来的父节点p成为孩子r的左孩子
                  p.parent = r; //p r正式确立父子关系
              }
              return root;
          }
#+END_SRC
* Vector
** Vector vs Arraylist
共同点：
1. 都是基于数组
2. 都支持随机访问
3. 默认容量都是 10
4. 都有扩容机制

区别：
1. Vector 出生的比较早，JDK 1.0 就出生了，ArrayList JDK 1.2 才出来
2. Vector 比 ArrayList 多一种迭代器 Enumeration
3. Vector 是线程安全的，ArrayList 不是
4. Vector 默认扩容 2 倍，ArrayList 是 1.5
如果没有线程安全的需求，一般推荐使用 ArrayList，而不是 Vector，因为每次都要获取锁，效率太低。

---------------------

本文来自 拭心 的CSDN 博客 ，全文地址请点击：https://blog.csdn.net/u011240877/article/details/52900893?utm_source=copy 
** Vector的同步实现
用来存储元素的数组是个实例变量，所以Vector在当前对象实例上加锁来保证线程安全
具体的，就是使用synchronized关键字来修饰方法，add、get等
* Stack
** 特点
1. 继承自 Vector
2. 有 5 种创建 Stack 的方法
3. 采用数组实现

---------------------

本文来自 拭心 的CSDN 博客 ，全文地址请点击：https://blog.csdn.net/u011240877/article/details/52901274?utm_source=copy 
* Map
** Map 接口提供了三种角度来遍历 Map:
1. KeySet
2. Values
3. Entry

1.KeySet
KeySet 是一个 Map 中键（key）的集合，以 Set 的形式保存，不允许重复，因此键存储的对象需要重写 equals() 和 hashCode() 方法。
可以通过 Map.keySet() 方法获得。

2.Values
Values 是一个 Map 中值 (value) 的集合，以 Collection 的形式保存，因此可以重复。
通过 Map.values() 方法获得。

3.Entry
Entry 是 Map 接口中的静态内部接口，表示一个键值对的映射.

---------------------

本文来自 拭心 的CSDN 博客 ，全文地址请点击：https://blog.csdn.net/u011240877/article/details/52929523?utm_source=copy 
* AbstractMap
** 两个成员
#+BEGIN_SRC java
      transient Set<K>        keySet;
      transient Collection<V> values;
#+END_SRC
* HashMap
** 特点
结合平时使用，可以了解到 HashMap 大概具有以下特点：

底层实现是 链表+数组，JDK 8 后又加了 红黑树
实现了 Map 全部的方法
key 用 Set 存放，所以想做到 key 不允许重复，key 对应的类需要重写 hashCode 和 equals 方法
允许空键和空值（但空键只有一个，且放在第一位，下面会介绍）
元素是无序的，而且顺序会不定时改变
插入、获取的时间复杂度基本是 O(1)（前提是有适当的哈希函数，让元素分布在均匀的位置）
遍历整个 Map 需要的时间与 桶(数组) 的长度成正比（因此初始化时 HashMap 的容量不宜太大）
两个关键因子：初始容量、加载因子
除了不允许 null 并且同步，Hashtable 几乎和他一样。

---------------------

本文来自 拭心 的CSDN 博客 ，全文地址请点击：https://blog.csdn.net/u011240877/article/details/53351188?utm_source=copy 
** resize()
扩容过程中几个关键的点：

新初始化哈希表时，容量为默认容量，阈值为 容量*加载因子
已有哈希表扩容时，容量、阈值均翻倍
如果之前这个桶的节点类型是树，需要把新哈希表里当前桶也变成树形结构
复制给新哈希表中需要重新索引（rehash），这里采用的计算方法是 
e.hash & (newCap - 1)，等价于 e.hash % newCap
结合扩容源码可以发现扩容的确开销很大，需要迭代所有的元素，rehash、赋值，还得保留原来的数据结构。

所以在使用的时候，最好在初始化的时候就指定好 HashMap 的长度，尽量避免频繁 resize()。

---------------------

本文来自 拭心 的CSDN 博客 ，全文地址请点击：https://blog.csdn.net/u011240877/article/details/53351188?utm_source=copy 
** 为什么哈希表的容量一定要是 2的整数次幂
1. 使用减法替代取模，提升计算效率；
2. 为了使不同 hash 值发生碰撞的概率更小，尽可能促使元素在哈希表中均匀地散列。


---------------------

本文来自 拭心 的CSDN 博客 ，全文地址请点击：https://blog.csdn.net/u011240877/article/details/53351188?utm_source=copy 
** HashMap 允许 key, value 为 null，同时他们都保存在第一个桶中。
key为null hash结果为0
** HashMap的三个阈值属性
TREEIFY_THRESHOLD
UNTREEIFY_THRESHOLD
MIN_TREEIFY_CAPACITY //当table.length超过这个阈值时，才应考虑将桶中node链变为红黑树

---------------------

本文来自 拭心 的CSDN 博客 ，全文地址请点击：https://blog.csdn.net/u011240877/article/details/53358305?utm_source=copy 
** 红黑树的比较器在哪里？
按hash值比，相同再按key比
** 问题
*** Collections.synchronizedMap和ConcurrentHashMap的比较
* ConCurrentHashMap
** 摒弃了Segment（锁段）的概念，而是启用了一种全新的方式实现,利用CAS算法。
主要设计上的变化有以下几点:

不采用segment而采用node，锁住node来实现减小锁粒度。
设计了MOVED状态 当resize的中过程中 线程2还在put数据，线程2会帮助resize。
使用3个CAS操作来确保node的一些操作的原子性，这种方式代替了锁。
sizeCtl的不同值来代表不同含义，起到了控制的作用。
至于为什么JDK8中使用synchronized而不是ReentrantLock，我猜是因为JDK8中对synchronized有了足够的优化吧。
** 为了并发增加的辅助类
** sizeCtl
#+BEGIN_SRC java
  //负数代表正在进行初始化或扩容操作
  //-1代表正在初始化
  //-N 表示有N-1个线程正在进行扩容操作
  //正数或0代表hash表还没有被初始化，这个数值表示初始化或下一次进行扩容的大小，这一点类似于扩容阈值的概念

  private transient volatile int sizeCtl;
#+END_SRC
** Node内部类
#+BEGIN_SRC java
  static class Node<K,V> implements Map.Entry<K,V> {
      final int hash;
      final K key;
      volatile V val;//加了volatile
      volatile Node<K,V> next
  }
#+END_SRC
** 总结：分段相当于hbase中的分region啊
ConcurrentHashMap中的get、containsKey、put、putIfAbsent、replace、Remove、clear操作
由于前面提到Segment中对HashEntry数组以及数组项中的节点链遍历操作是线程安全的，因而get、containsKey操作只需要找到相应的Segment实例，
通过Segment实例找到节点链，然后在segment内遍历HashEntry数组即可。
而对于ConcurrentHashMap中的size、containsValue、contains、isEmpty操作
因为这些操作需要全局扫瞄整个Map，正常情况下需要先获得所有Segment实例的锁，然后做相应的查找、计算得到结果，再解锁，返回值。
然而为了竟可能的减少锁对性能的影响，Doug Lea在这里并没有直接加锁，而是先尝试的遍历查找、计算2遍，
如果两遍遍历过程中整个Map没有发生修改（即两次所有Segment实例中modCount值的和一致），则可以认为整个查找、计算过程中Map没有发生改变，
我们计算的结果是正确的，否则，在顺序的在所有Segment实例加锁，计算，解锁，然后返回。
* Set
Set中无重复元素，无序
** 两个实现
1. 散列存放：HashSet
2. 有序存放：TreeSet
3. 当调用add（Object）方法时候，
首先会调用Object的hashCode方法判hashCode是否已经存在，如不存在则直接插入元素；
* 零碎问题待整理
RandomAccess
深拷贝浅拷贝
https://blog.csdn.net/u011240877/article/details/52743564

Stream<E> stream()
Stream<E> parallelStream()

---------------------

本文来自 拭心 的CSDN 博客 ，全文地址请点击：https://blog.csdn.net/u011240877/article/details/52773577?utm_source=copy 
