* 树
** 树的表示
*** 树的约定术语
| 英文            | 翻译   |
|-----------------+--------|
| degree          | 度     |
| root            | 根     |
| edge            | 边     |
| node            | 顶点   |
| child           | 孩子   |
| parent          | 父亲   |
| silblings       | 兄弟   |
| leaf            | 叶子   |
| grandparents    | 祖父   |
| depth           | 深度   |
| height          | 高度   |
| ancestor        | 祖先   |
| proper ancestor | 真祖先 |
|                 |        |
*** inbox
- RPN与树的关系
- 树中顶点数与边数同阶
- 长子兄弟表示发法的优点，每个节点所需的存储空间大致相当，相对于父亲孩子表示法，查找孩子时的耗费更加平均
** 二叉树
*** 概念
1. 所有顶点的出度不超过2的树是一颗二叉树
2. 在保障有根性和有序性的前提下，用长子兄弟表示法可以把任意一棵树表示为二叉树
*** 二叉树的实现
**** inbox
1. getsize()、getHeight（）、getDepth（）递归实现，递归计算左子树加右子树
2. java中的迭代器完成了C++中的函数指针的便利性
3. 树的前序、后序、层次遍历均可在O(n)时间内完成
4. jdk中怎么实现迭代器的。不能再接一个list吧。空间有点太浪费了
**** 遍历
***** 定义
- 已知中序 * [先序或者后序] = 重构二叉树
- 已知真二叉树 * [先序或者后] = 重构二叉树 
| 先序                                    | 中序                     | 后序              |
|-----------------------------------------+--------------------------+-------------------|
| v \rArr l \rArr r                       | l \rArr v \rArr r        | l \rArr r \rArr v |
| 中左右                                  | 左中右                   | 左右中            |
| 用栈迭代替代尾递归                      | 迭代遍历，线性时间复杂度 |                   |
| 迭代进化 : 栈只存右孩子，包括空的右孩子 |                          |                   |

***** 广度优先遍历
- 使用队列辅助实现
***** 深度优先遍历
*** 二叉树的应用
1. expression tree : inorder travelsal
2. PFC frefix-free code : 是一种在线算法，可以再接受二进制的同时进行解码
*** inbox
- 设二叉树的高度为h，name二叉树的节点数n的取值范围为 : h < n < 2^(h+1)
- 满树
- 真二叉树 : 所有顶点出度为2或者0
** 完全二叉树 
*** 向量实现的完全二叉树
*** 定理：在完全二叉树的向量实现中，root节点对的秩为0，则秩为i的节点
    1. 若存在左孩子，左孩子的秩为 2i+1
    2. 若存在右孩子，则右孩子的秩为2i+2
    3. 若存在父节点，则父节点的秩为（i-1)/2
* binary search tree
** bst定义
- 节点中的value有顺序性
- 中序遍历是单调的
** 实现
- 查找
- 插入
  - 记得更新树高
  - 线性时间复杂度
- 删除
  - succ() : 返回单钱节点的直接后继
  - O(h)
** 控制树高的探索
*** 考察树高的平均情况
   1. 随机生成 \log n
   2. 随机组成 根号n
*** 适度平衡
- 理想平衡出现的概率极低，维护成本过高，需要适当放松标准
- 高度渐进的不超过O（\log n）,即为适度平衡
*** 等价bst
- 前提 : 中序遍历不改变
- 特性 : 上下可变，左右不乱 
- 使用等价bst来更改一颗bst的拓扑结构，使其从一颗bst变换成bbst
**** 具体手段 : 旋转操作
- zag : 逆时针
  1. 保存当前节点右子树
  2. 使右孩子的左子树称为当前节点的右子树
  3. 使当前节点成为保留右子树的左孩子
  4. 保留右子树代替当前节点此前在树中的位置
- zig : 顺时针

** avl树
*** 平衡标准
- 使用平衡因子 : 左子树高度与右子树高度之差
- |平衡因子| 不大于1
*** rebalance
**** 观察
- 插入导致失衡
  - 只有插入节点的祖先会有可能失衡
  - 但是更容易rebalance
- 删除导致失衡
  - 至多只有一个祖先节点失衡
  - 但是更不容易rebalance
**** 重平衡实现
- 插入
  - 复杂度 O(1)
  - (由于插入失衡一定发生在高度相对较高的子树上)经过向旋转，全树恢复平衡
  - 经过双旋，全树恢复平衡
- 删除
  - 失衡传播，可能会造成O(\log n)次调整
**** 3+4重构
- 步骤
  1. 把v,p,g按中序排列重命名
  2. 把至多4颗子树按中序遍历重命名
  3. 直接组合成以b为根的子树
*** AVL树的综合评价
**** 优点
- 无论查找、插入、删除，最坏的时间复杂度为O(\log n)
**** 缺点
- 借助平衡因子，需要对节点元素进行改造或封装
- 实测rebalance成本很高
- 每次rebalance，树的拓扑结构的改变量坑能高达\Omega(\log n)
** Application of binaryTree to Compiler
** 二叉查找树是TreeMap和TreeSet的基础
* 高级查找树
** 伸展树
*** 利用数据局部性原理
伸展树想要利用局部性原理
1. 刚刚被访问的元素可能马上要被访问
2. 刚刚被访问的元素的周边元素可能马上要被访问
*** 实现
**** 1. 使用zig和zag操作将刚刚被查询到的元素提升至根节点
- 退化 : 一步一步往上爬到顶最坏情况会退化到\Omega(n)
**** 2. 改进：回溯两层的四种情况（考察的是祖孙三代）
- 性能
  - 分摊意义下：单趟伸展的复杂度为logn
  - 单次最坏情况不能避免，但是可以避免总是出现坏的情况
- 效果
  - 每次对刚刚查询到的元素提升时，同时也将它经过的路径折叠起一半
**** 接口
- search接口
  - 与avl树不同的是，search操作也存在更改树的拓扑结构的可能
  - 一个正确(利用了局部性原理第二条)且方便(对插入而言)的语义 : 查找失败的时候也要把最接近目标的元素伸展到root
- insert接口
  - 把目标元素作为树根。把老树根（一定为目标元素的直接前驱）和其左子树作为目标元素的左子树
- remove接口
  - 把root的直接后继作为新root
***** 伸展接口(splay)

** B-树（平衡多路搜索树）
*** 目标：实现高效的io，即解决不同存储结构的素的差异
**** inbox
- 640k
- 封闭分析 
- 内存和外村的访问速度差异 : 10的5次方(一秒之于一天)
- 内外存操作次数大致相当

*** 利用存储器差异的两个事实
1. 内存一秒，硬盘一天 10的5次方
2. 从硬盘读1b和1k的速度差不多（因为使用批量（page）来传输数据）
*** B-树的性质 
- 所有叶节点的深度相等
*** 实现
- 节点表示
  1. n个关键码组成的关键码数组
  2. n+1个引用组成的分支数组
  3. 数组的search操作用顺序查找 : 长度为几百的数组，二分查找反而没有顺序查找的效率高
  4. 节点大小与外存页面（page）大小相等（KB级）
  5. m/2<=x<=m
- search
  - 复杂度
    - 与avl树类似 \Omicron(\log_{m}N)
      - m阶B-树的查找复杂度上界是\Omicron(\log_{m}N)
      - m阶B-树的查找复杂度下界是\Omega(\log_{m}n)
    - 与avl树不同的是 : 常数项的更小
- insert
  - 步骤
    1. search操作失败与叶节点，返回一个不大于插入元素的节点
    2. 节点内部
       1. 关键码数组 : 向量的插入
       2. 分支数组 : 因为是叶节点，直接接入一个null元素
  - 副作用
    - 一个B-树节点插入一个新的元素后，可能会发生上溢
- remove 
  - 步骤
    1. search到待删除元素x
    2. 将remove操作转嫁到叶节点
       - x的直接后继y一定在一个叶节点中
       - 用y替换x
    3. 在y所在的叶节点中
       1. 关键码数组 : 删除y
       2. 分支数组 : 删除一个null (叶节点的分支全为null)
  - 副作用
    - 可能会发生下溢

 
*** 维护B-树的m阶结构
**** 解决上溢--》分裂
- 步骤
  1. 选取中位数节点x
  2. 将x提升插入到父节点
  3. 将x左边的所有元素作为一个新的节点，并成为x的左引用
  4. 右边同理
  5. 检查父节点是否因为x的插入发生上溢
- 复杂度 : \Omicron(log_{}n)
- 总结
  - 根节点发生上溢时，由于根节点没有父节点，直接溢出一个新的根节点
  - 插入树长高的唯一方式
  - 树长高发生在顶部
- trick:插入的search阶段可以直接检测中间节点是否为满节点,满节点直接分裂。
**** 解决下溢--》旋转+合并
- 旋转 : 存在即使借出一个元素后仍不至下溢的兄弟节点，即兄弟节点有不少于m/2的上整个关键码
  - 注意保持中序遍历的顺序，具体的参与此次旋转的应该还包括父节点
  - 旋转一次即可解决下溢
- 合并 : 从父节点中借出一个关键码来粘合比较小的兄弟
  - 相比于旋转，合并是有可能向上传播的
  - 合并是唯一导致树变矮的操作
- trick:在实际场景中，由于一颗b树的大部分关键字都在叶节点中，所以删除一般都会命中叶节点
*** B-树的应用场景
- mysql的两种存储引擎

* B+树
*** 三种存储引擎
1.hash存储引擎
- 支持随机读写的Mr.Right
2.B树存储引擎
- 支持顺序和随机读写，mysql
3.LSM树存储引擎
- 比B树存储引擎高在将随机写转化为顺序写(imp by batch),写入效率高
— 但是因为数据不及时落盘，目标数据可能存在多个部件中
- 同时也因为只追加的缘故，目标数据可能在多个磁盘文件上
- 比如：在hbase中，在一个region上的数据写入，如果我们忽略列存的事实，即便数据按行存，同一行也可能会存在多个磁盘文件中

1. 中间节点只存放关键字和孩子指针，最大化了分支数，也就是logn的底数

* 红黑树
** 不要遗忘历史
1. ephemeral结构
2. persisten结构
** 我们需要一种不论是insert还是remove的重构操作数都是常数O(1)==红黑树！！
nice！！
** 红黑树的规则
1. 黑帽子
2. 黑靴子（只是假想的，trick）
3. 红节点的父节点和子节点比为黑色
4. 黑深度满足平衡定义
** 解决双红缺陷
提升变换
** 解决删除时的双黑缺陷
** 可以说听得一头雾水
红黑树和2-4树的强关联
* succ、zag、zig、邓俊辉=》计算几何=》bbst的历史版本
