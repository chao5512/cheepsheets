#+title: netty
* overview
- 异步网络框架
- 事件驱动
* 使用场景
+ 可以做为http服务器
+ socket 开发
+ 支持长连接的开发
* 组件
** HttpServerCodec
用于编解码
** EventLoop
EventLoop由一个线程驱动，其处理了一个channel的所有事件，并在整个EventLoop周期内都不会改变，这保证了异步的同时，来自同一个channel的消息的顺序不被打乱
** ChannelInboundHandlerAdapter extends ChannelHandlerAdapter implements ChannelInboundHandler
实现了所有ChannelInboundHandler的方法（所有事件）的抽象基类，仅仅是把消息转发到下一个ChannelHandler，有了这个基类我们就可以只关注我们感兴趣的事件
在链接被建立的时候安装到handler pipeline中
1. 注意：在channelRead方法调用后不会自动release msg
2. 注意：channelRead方法不保证接收到的是一个对端发过来的一个完整的消息，即便这个msg很小，它也有可能被分成多块接收，调用多次channelRead
*** SimpleChannelInboundHandler<I> extends ChannelInboundHandlerAdapter
指定了msg类型为<I>的channelHandler，其可以在channelRead后自动release msg
** Channel
channel用于所有的io操作
1. channel继承comparable接口，以表示每个channel都是独一无二的
2. 每个channel中聚合了处理链路（ChannelPipeline）和ChannelConfig（支持热更新)
3. channel是线程安全的，可以多线程同时向一个channel写数据
** ChannelPipeline
channelPipeline由应该作用在某个channel上的所有channelHandler装配而成，提供了可以动态调整ChannelHandler的接口
1. pipeline在组装channelHandler的时候，可以为特定的channelHandler指定执行的线程池。作用就是这样这个handler上的事件可以不消耗workGroup
** ChannelHandlerContext
代表了ChannelHandler和ChannelPipeline之间的关联，主要用于本ChannelHandler与同一个channel上的其他ChannelHandler交互
1. 通过ChannelConfig.setAutoRead(boolean autoRead)方法可以实现反应式系统的特性之一回压(back-pressure)
* netty native transport
netty除了支持使用java提供的Nio、Oio传输外，还支持依赖于具体平台(linux、macos、bsd)的Epoll传输，
Epoll更加适配Netty现有的线程模型，具有更高的性能和更低的垃圾回收压力
* netty的传输类型
** NIO

** Epoll
** OIO 使用阻塞流
** Local 在VM内部通过管道进行通信
** Embedded 可以安装CHannelHandler，而又不经过网络，测试用
* 零拷贝
在使用NIO或者Epoll时才可用，可以实现高效地将数据从文件系统移动到网络端口，节省了将数据从内核空间复制到用户空间的消耗。
但是其只能够传输文件的原始内容，也就是说加密或者压缩的数据，我们只能够将其处理后的数据移动而非原始数据
* Reactor模式
基本思想：I/O复用 + 线程池化
** 传统的IO模型
*** 特点
1. 使用阻塞io模式获取数据
2. 对每个链接的处理都需要一个线程来完成，这包括数据输入、业务处理、数据返回
*** 缺点
1. 并发数很大时，需要更多的线程，占用大量的系统资源
2. 连接建立后，如果暂时没有数据可读，会阻塞在连接读上，浪费线程资源
** 单线程Reactor模型
*** 特点
1. 单线程，所有事件都被一个线程处理，没有线程间的通信和竞争问题
*** 缺点
1. 性能上，单线程，无法发挥多核的优势
2. 可靠性上，线程跑飞会造成整个模块不可用
** 单Reactor多线程模型
*** 特点
1. 充分利用了多核的处理能力，将不同类型的channel事件（连接、读写）分配给不同线程池处理】
*** 缺点
单reactor可能在高并发下成为瓶颈
** 多Reactor多线程模型
TODO

* netty编程范式
1. 一个帮助启动netty服务的启动器ServerBootstrap
2. 拦截init方法，在这替换我们要用的handler
3. 自定义handler中重写read0方法，处理数据
* RPC
1. 高效的消息传输
2.
** todo
1. netty的零拷贝是如何做到的？
2. 加入序列化这一步后又会有什么不一样么？还是零拷贝么？
* netty HttpServer
1. 要通过netty处理Http请求，要先进行编解码
2. 对收到的request用解码器Decoder，对发送的响应用编码器Encoder，注意request也有编码器，response也有解码器。
** HttpObjectCodec
1. maxInitialLineLength 太长的初始行(todo 啥是初始行)会抛出TooLongFrameException
2. maxHeaderSize 太长的header会抛出TooLongFrameException
3. maxChunkSize 太长的content会被切分成多个content,如果在使用的时候想要一个完整content,netty有一个预置的实现: HttpObjectAggregator
   
* netty 堆外内存和线程模型
** ChannelHandlerContext
因为有Context的存在,所以一个ChannelHandler可以很容易的和pipeline以及其他ChannelHandler进行交互,这包括
*** 1. Notify
可以context的firexxx方法来对紧邻的handler做各种事件的通知
*** 2. 动态修改pipeline
context中可以获得当前context绑定到的pipeline,拿到pipeline后可以读pipeline进行动态修改
*** 3. 可以保存ctx,以后随时拿出来用
*** 4. 存储状态信息
attr(AttributeKey) 可以允许存储一些handler相关、channel相关的上下文

** ChannelPipeline
每个channel都有自己的pipeline,channel创建的时候,pipeline就已经创建并且关联之
*** Event flow
数据从SocketChannel.Read(ByteBuffer)读过来,在有序的ChannnelInboundHandler中传播,一个入站事件在经过所有的ChannleInboundHandler后被丢弃
出站事件在有序的ChannelOutboundHandler中传播,最后通过SocketChannel.write(ByteBuffer)写到socket

#+begin_src text
   ChannelPipeline p = ...;
   p.addLast("1", new InboundHandlerA());
   p.addLast("2", new InboundHandlerB());
   p.addLast("3", new OutboundHandlerA());
   p.addLast("4", new OutboundHandlerB());
   p.addLast("5", new InboundOutboundHandlerX());


  其中1和2实现了ChannelInboundHandler,3和4实现了ChannelOutboundHandler,5实现了两个
  则
  入站顺序为1,2,5
  出站顺序为5,2,1
#+end_src
*** 配置pipeline
可以在pipeline.addLast()的时候为handler指定group,这样可以为不同的handler分配不同的线程
*** 线程安全
可以随时修改pipeline中的handler 列表,因为pipeline是线程安全的
** ChannelHandler
拦截 处理 传播IO事件的handler
*** 分类
**** 两种
1. 入站事件处理器 ChannelInboundHandler
2. 出站时间戳护理期 ChannelOutboundHandler
**** 相应的适配器
1. 入站:ChannelInboundHandlerAdapter
2. 出站:ChannelOutboundHandlerAdapter
3. 出入站:ChannelDuplexHandler
*** 状态管理

** ByteBuf

** PooledByteBufAllocator


* bugs
** client收不到服务端响应
- 现象
  1) 如果服务端在ctx上加了ChannelFutureListener.CLOSE_ON_FAILURE监听器，则服务端会在解码（应该是 猜的）的时候捕捉错误(这个异常最后被掩埋了),并主动关闭此channel，此时客户端还在future.get数据，就会报连接关闭的异常。实际上是因为解码异常导致的连接关闭。
  2) 如果服务器没有在检测到failure时关闭连接，客户端的表现是阻塞在future.get方法上，因为解码错误，丢失响应数据
- solution：确认编码解码器，我这里是把response的编码器写成了解码器
- 一般编码问题报错
#+begin_example
java.lang.UnsupportedOperationException
#+end_example

