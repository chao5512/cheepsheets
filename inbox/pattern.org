#+title: pattern
* 设计模式原则
** 开闭原则
在对程序进行改变的时候,应该尽量以扩展的方式进行,而不是直接修改.这要求设计的时候要尽量考虑到对扩展的支持.
** 单一职责
对接口和类的修改应出于单一的原因
** LSP原则
代码中父类出现的地方都可以替换为子类
** 依赖倒置
模块间的依赖应该尽量通过对抽象的依赖来完成
** 接口隔离
接口对外暴露的方法应该尽可能的少
** 迪米特法则
类间的依赖应该尽可能的少
* 1. 单例模式
* 2. 工厂模式
[[https://juejin.im/post/6844903608266293255][Ref]]
** 分类
*** 工厂方法
*** （精简）简单/静态工厂
常用，JUC包中的Excutors就是一个简单/静态工厂
*** （增强）抽象工厂
* 3. 代理模式
当无法直接访问某个对象或不应该直接访问某个对象时可以通过一个代理对象来间接访问，为了保证客户端使用的透明性，所访问的真实对象与代理对象需要实现相同的接口。
** 静态代理
#+begin_src java
  public class ProxyDemo {

      static interface BaseUser{
          void info();
          void real();
      }

      static class ProxyUser implements BaseUser{
          BaseUser baseUser;
          public ProxyUser(BaseUser baseUser) {
              this.baseUser = baseUser;
          }
          public void info() {
              System.out.println("I'm Proxy,I can help you");

          }
          public void real() {
              System.out.println("I will help you visit google");
              baseUser.real();
              System.out.println("I had help you visit google");
          }

      }
      static class TargetUser implements BaseUser{
          public void info() {
              System.out.println("I'm google,what you what do?");
          }
          public void real() {
              System.out.println("I.m google,this is searched info");
          }
      }

      public static void main(String[] args) {
          BaseUser targetUser = new TargetUser();
          BaseUser proxyUser = new ProxyUser(targetUser);
          proxyUser.info();
          proxyUser.real();
      }

  }
#+end_src
** 动态代理
*** 优势
1. 降低耦合
2. 提高开发效率
3. 方便维护
4. 不关注目标具体实现
*** 实现
**** jdk动态代理
***** Proxy
*** 实例
Hadoop Rpc中各种协议的动态代理
* 4. 原型模式
1. clonable
   1. 在堆内存中直接进行二进制流复制,比new要快
   2. 一种等同于深拷贝的复制,自己实现一个二进制流的复制来拷贝一个对象,递归拷贝其引用的对象
2. 浅拷贝和深拷贝

* 拦截器模式
Intercepting Filter Pattern
** 用处
1. 对请求或者响应做预处理/后处理
2. 实例:认证\授权\记录日志
** 角色
1. filter/interceptor : 需要添加的预处理动作
2. Filter Chain : 过滤器链,内含多个filter,保证filter的插入顺序
3. Target : 被添加动作的目标
4. Filter Manager : 管理过滤器链和过滤器,实际上在小型项目或者不那么追求解耦的时候,可以没有这个manager,并且 FilterChain也可以简单的用个List代替(Kafka producer interceptor就是这么干的)
5. client : 客户,调用Target的方法.或者说是向target发送请求的角色,如此targe便可以通过filter对请求和响应做额外的处理
* Reactor
Reactor模式应用于服务端,是一种基于事件驱动的设计模式

* 适配器模式
用来把一类接口转换为另一类接口,来满足实际需求
** 实例
*** 变压器,c口装a口
*** hadoop Rpc中的各种协议转换为可以网络传输的协议
对于ClientProtocol来说,其参数无法直接进行网络传输,需要使用适配器模式将其转换为可以进行网络传输的协议
