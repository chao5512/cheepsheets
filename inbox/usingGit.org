* git备忘录
[[https://blog.csdn.net/gcc_sky/article/details/14047687][参考]]
** 连接github
#+BEGIN_SRC sh
  1. 本地生成ssh key
  ssh-keygen -t rsa -C "your_email@youremail.com"

  2. 添加sshkey for github
  Account Settings ->左侧 SSH Keys ->  Add SSH key

  3. test connecting to github
  ssh -T git@github.com

  4. 修改本地ssh remote url
  #上面虽然设置了免密 但是使用https方式还是会每次要求输入账户密码 可用如下密令查看url格式
  git remote -v
  #更改url为ssh方式
  git remote set-url origin git@github.com:chao5512/cheepsheets.git

  5. enjoy git!
#+END_SRC
** git工作流
+ 切换分支前要提交修改
** 两个remote branch
对一个feature分支来说，push的目的branch和merge的目的branch应该是不一样
*** upstream-主流分支
merge目的branch
*** push-remote 
** git使用场景
*** 版本回退
与github相连，在某次提交（增加很多文件）后，想要回退到之前的版本，将文件用增量的方式慢慢加入git
#+BEGIN_SRC sh
  #1. 找到回退到哪次提交id
  git log
  #2. 本地回退
  git reset -hard {id}
  #3. 推送到远程
  git push -f -u origin master
#+END_SRC
*** 推送到远程
#+BEGIN_SRC sh
  git remote add origin addressOfMyRepo
  git push -u origin master
#+END_SRC

* my old git
** git osxkeychain for mac
   it for a HTTPS clone
   1. Set git to use the osxkeychain credential helper
   git config --global credential.helper osxkeychain

   2. use keychain of my mac
   open spotlight and type keychain.app


** create a repo
   to put your project upon Github,you need create a repo for
   it to live in.
   1. a license file determines how to share.
** fork a repo
   use to propose changes to other's project
   or as a starting point of our idea.
   1. sync your fork repo with the upstrem repo
      git remote -v
      git remote add upstream https://github.com/pezydata-ai/stretch.git
   2. syncing a fork
      git fetch upstream
      git checkout master
      git merge upstream/master
   3. commit to github
      git push origin master
   4. about tag
      git log
      git tag <name> a47b3d36e
      git push origin <name>
      git tag
      git tag -d <name>
      git push origin :<name>








** TODO to learn.
1. https://opensource.guide/
2. https://lab.github.com/
3. https://help.github.com/articles/creating-a-commit-with-multiple-authors

* 表严肃
checkout id前七位 穿越到指定后悔药
git log -p[ache]
modify---staged---commit
git add && git commit -m ""  命令的连接
git log --oneline --graph
git tag -a[notation] v1 -m "备注"
git tag 列出所有标签
git的合并工具
git remote add 地址
git remote -v 查看

git pull = git fetch + git merge

* git 是基于ssh的

** ssh 配置
.ssh/config
*** ssh命令详解 
**** ssh-keygen
用来生成，管理，转换ssh的秘钥的工具
1. -t : 指定秘钥类型，默认rsa
2. -C : 指定user@host 默认为系统的
3. 通常工具会询问一个文件位置来存放私钥，公钥就是私钥append一个.pub
4. 还会询问一个密码，设置为空就好
** 配置多个git远程仓库
*** 在~/.ssh 目录下划分好各仓库目录
#+BEGIN_SRC sh
  cd ~/.ssh
  mkdir github
  mkdir gitlab
  mkdir gitee
#+END_SRC
*** 使用ssh-keygen工具生成ssh的私钥和公钥
#+BEGIN_SRC sh
  ssh-keygen -C "" -f ~/.ssh/gitee/id_rsa
  ssh-keygen -C "" -f ~/.ssh/github/id_rsa
  ssh-keygen -C "" -f ~/.ssh/gitlab/id_rsa
#+END_SRC

*** 配置
[[https://blog.csdn.net/Daiwood/article/details/50561306][配置非22端口]]
#+BEGIN_SRC sh
  vim ~/.ssh/config

  # 添加如下内容

  #github的配置
  Host github.com
  HostName github.com
  IdentityFile ~/.ssh/github/id_rsa
  User git
  # gitlab的配置
  # 直接配置ip的例子
  Host 192.168.1.1
  # 配置非22端口的例子
  Port 2226
  IdentityFile ~/.ssh/gitlab/id_rsa
  User git
  #码云的配置
  Host gitee.com
  HostName gitee.com
  IdentityFile ~/.ssh/gitee/id_rsa
  User git
#+END_SRC
*** 去远端仓库添加公钥
1. for github ： https://github.com/settings/keys -》 new ssh 添加刚刚生成的给github的公钥
*** connect test
有些服务器添加公钥认证会比较慢，所以如果失败了可以确认服务器是否已经添加成功了，一般会有邮件通知
#+BEGIN_SRC sh
  ssh git@github.com
#+END_SRC
* git for aur
** git config
Git 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量。 这些变量存储在三个不同的位置：

1. /etc/gitconfig 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果在执行 git config 时带上 --system 选项，那么它就会读写该文件中的配置变量。 （由于它是系统配置文件，因此你需要管理员或超级用户权限来修改它。）

2. ~/.gitconfig 或 ~/.config/git/config 文件：只针对当前用户。 你可以传递 --global 选项让 Git 读写此文件，这会对你系统上 所有 的仓库生效。

3. 当前使用仓库的 Git 目录中的 config 文件（即 .git/config）：针对该仓库。 你可以传递 --local 选项让 Git 强制读写此文件，虽然默认情况下用的就是它。。 （当然，你需要进入某个 Git 仓库中才能让该选项生效。）
*** 优先级local > user > etc
#+BEGIN_SRC sh
  # 查看配置和所在文件
  git config --list --show-origin
#+END_SRC
** first step 
*** 配置用户信息
#+BEGIN_SRC sh
  # 使用git config 工具配置，保存在当前用户配置文件下
  git config --global user.name "wangchao"
  git config --global user.email 543164029@qq.com
#+END_SRC
*** 配置默认editor
在输入git信息 比如commit message的时候使用
#+BEGIN_SRC sh
  git config --global core.editor emacs
#+END_SRC
* 使用场景
** 不小心提交了不该提交的文件到暂存区，而且这个文件本地还要用
#+BEGIN_SRC sh
  git rm --cached README
#+END_SRC
** 有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 --amend 选项的提交命令来重新提交
#+BEGIN_SRC sh
  git commit --amend
#+END_SRC
最终我们只会得到最后一次的提交message
** TODO 修整gitlog
** 
