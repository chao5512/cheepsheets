#+title: 一些零碎的概念
* CI/CD
1. Continuous Integration (CI) 持续集成
2. Continuous Delivery (CD) 持续交付
3. Continuous Deployment (CD) 持续部署
* 云原生
云原生是一种构建和运行应用程序的方法，是一套技术体系和方法论.Native表示应用程序从设计之初即考虑到云的环境，原生为云而设计，在云上以最佳姿势运行，充分利用和发挥云平台的弹性+分布式优势
** 特点
1. 松耦合
2. CI/CD
3. 各种云之间应该能够无缝切换
** 要点
DevOps+持续交付+微服务+容器
* DevOps
在CI/CD的趋势下，开发部署和运维QA不能之间的沟通变得更为频繁和深入。DevOps是一套针对这几个部门间沟通与协作问题的流程和方法。
* Prometheus 指标采集器 + Grafana监控页面和邮件报警
* Dapper的一个开源实现Zipkin
* ELK日志分析组件
1. Elasticsearch：搜索引擎，同时也是日志的存储。
2. Logstash：日志采集器，它接收日志输入，对日志进行一些预处理，然后输出到Elasticsearch。
3. Kibana：UI组件，通过Elasticsearch的API查找数据并展示给用户。
* 网关
在调用者和被调用者中间加一层网关，每次调用时进行权限校验。另外，网关也可以作为一个提供服务接口文档的平台。
* DRY原则
DRY是 Don't repeat yourself 的缩写，意思是"不要重复自己"。
* 抽象原则
[[http://www.ruanyifeng.com/blog/2013/01/abstraction_principles.html][抽象原则]]
* 领域驱动设计（Domain-Driven Design，简称DDD）
划分服务的一种指导原则
* ＩＤＣ
internet data center 数据中心
* 衡量系统可靠性
1. 是MTTF（平均失效时间）
2. MTTR（平均恢复时间）
** MTTF
mean time to failure，预防大于治疗
*** 造成系统失效的原因
1. 硬件失效，比如坏盘、网卡损坏、机器宕机等；
2. 自身缺陷，一般指程序自身的bug或者性能瓶颈；
3. 运维故障，由于不合理的操作导致的故障；
4. 服务过载，突发热点、超大的对象、过滤大量数据的请求；
5. 依赖失效，依赖的HDFS、Zookeeper组件出现不可用导致HBase进程退出。
*** 如何应对大请求
**** 大请求的定义
可以把消耗资源超过预设的阈值的请求定义为大请求。在日志中记录大请求可方便监控和排查问题
**** 如何应对大量的大请求
大请求消耗更多的资源，这意味着大量的大请求可能会造成cpu或者io的负载过高，使得整个服务变得很慢就像卡住了。一种应对策略是
允许一定比例的大请求存在，当大请求数量超过我们的期望时，对后续的大请求进行限速。
** MTTR
mean time to repair
* SOA
Service-Oriented Architecture 面向服务的架构
* 大集群
1. 分离模式没法做削峰填谷、充分利用资源
2. 大集群是充分利用资源的前提，但也带来新的问题，如何做好隔离
* 啥是shade包
shade包就是不光所有的依赖都随main class打包，甚至还给每个依赖换了个包名，这样不会再跟其他使用者依赖冲突
[[https://segmentfault.com/a/1190000039149043][uber-jar和shaded-jar]]
* ACID
Atomicity，Consistency，Isolation，Durability
* Jersey
** anything
*** ContainerLifeCycleListener
想要接受container life-cycle 通知,需要遵守这个接口定义,可以在container 启动\重新加载\shutdown时被通知
*** ApplicationHandler
container使用这个ApplicationHandler来处理ContainerRequest
*** RequestScope


