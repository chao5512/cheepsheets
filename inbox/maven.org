#+title: maven
* inbox
1. mvn -X ： 查看当前mvn使用配置文件
** 远程仓库的依赖下载不下来403错误
***  最后的办法
1. 下载jar包
2. mvn install:install-file -DgroupId=com.google.errorprone -DartifactId=javac -Dversion=9+181-r4173-1 -Dpackaging=jar -Dfile=javac-9+181-r4173-1.jar
* repository
** 配置公司仓库不生效
cause by [[https://blog.csdn.net/lovewebeye/article/details/80060410?utm_source=blogxgwz5][私有仓库不生效]]
solution 更改mirrorOf属性
** 配置国内源
todo 配置文件的生效顺序
* build
[[https://blog.csdn.net/riju4713/article/details/85102471][跳过test]]
** 打包带依赖，指定主类
#+BEGIN_SRC xml
        <plugin>
           <groupId>org.apache.maven.plugins</groupId>
           <artifactId>maven-shade-plugin</artifactId>
           <version>2.4.3</version>
           <executions>
                <execution>
                  <phase>package</phase>
                  <goals>
                    <goal>shade</goal>
                  </goals>
                  <configuration>
                    <filters>
                      <filter>
                        <artifact>*:*</artifact>
                        <excludes>
                          <exclude>META-INF/*.SF</exclude>
                          <exclude>META-INF/*.DSA</exclude>
                          <exclude>META-INF/*.RSA</exclude>
                        </excludes>
                      </filter>
                    </filters>
                    <transformers>
                      <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                        <mainClass></mainClass>
                      </transformer>
                    </transformers>
                  </configuration>
                </execution>
              </executions>
            </plugin>

#+END_SRC
* geting start
maven提供清晰的构建套路，mvn可以方便的管理：
** builds
** Documentation

** Reporting
** Dependencies
** SCMs
** Releases
** Distribution
* make a project with mvn

** 命令
#+BEGIN_SRC sh
  mvn archetype:generate
#+END_SRC
** -B 批量执行命令，不加-B可以交互式的按模板生成项目
#+BEGIN_SRC sh
  mvn -B archetype:generate \
    -DarchetypeGroupId=org.apache.maven.archetypes \
    -DgroupId=com.mycompany.app \
    -DartifactId=my-app
#+END_SRC
** pom
*** super pom
默认的超级父类，除非另外设置，不然项目中的所有pom都继承自这个pom
*** 最小pom
#+begin_example
  project root
  modelVersion - should be set to 4.0.0
  groupId - the id of the project's group.
  artifactId - the id of the artifact (project)
  version - the version of the artifact under the specified group
#+end_example
*** dependency
**** scope

** 继承性
dependencies
developers and contributors
plugin lists (including reports)
plugin executions with matching ids
plugin configuration
resources

*** 父工程一般定义打包方式为pom

*** super pom
像java中所有对象都默认继承Object，maven中所有pom都继承自一个super pom

* setting
** 两个settings.xml
*** global
${maven.home}/conf/settings.xml
*** user
${user.home}/.m2/settings.xml
** 
* maven进阶
[[https://www.cnblogs.com/davenkin/p/advanced-maven-multi-module-vs-inheritance.html][Ref]]
** 多模块和继承
多模块和继承关闭不比同时存在
1. 多模块可以将执行顺序推给maven
2. 继承是用于所有子模块共享父模块的配置，比如junit依赖
* plugin
** jacoco
java code coverage 分析单元测试覆盖率的插件
[[https://developer.ibm.com/zh/articles/j-lo-jacoco/][eclemama]]
* in action

** logback error - multipul bindings 
[[https://www.jianshu.com/p/9342d313e01a][Ref]]
*** logs
#+BEGIN_SRC sh
  SLF4J: Class path contains multiple SLF4J bindings.
  SLF4J: Found binding in [jar:file:/Users/x/.m2/repository/org/slf4j/slf4j-log4j12/1.7.25/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]
  SLF4J: Found binding in [jar:file:/Users/x/.m2/repository/ch/qos/logback/logback-classic/1.1.2/logback-classic-1.1.2.jar!/org/slf4j/impl/StaticLoggerBinder.class]
  SLF4J: Actual binding is of type [org.slf4j.impl.Log4jLoggerFactory]
#+END_SRC
*** solution 1
使用桥接器
*** solution 2
借助mvn
**** take a look of all dependencies
#+BEGIN_SRC sh
  dependency:tree
#+END_SRC
**** exclution the 多余 bindings
#+BEGIN_SRC xml
  <dependency>
    <groupId>com.facebook.airlift</groupId>
    <artifactId>bootstrap</artifactId>
    <version>0.186</version>
    <exclusions>
      <exclusion>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-jdk14</artifactId>
      </exclusion>
      <exclusion>
        <groupId>org.slf4j</groupId>
        <artifactId>log4j-over-slf4j</artifactId>
      </exclusion>
      <exclusion>
        <groupId>org.slf4j</groupId>
        <artifactId>jcl-over-slf4j</artifactId>
      </exclusion>
    </exclusions>
  </dependency>
#+END_SRC
