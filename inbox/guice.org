#+title: google guice
guice 是一个轻量的依赖注入的java框架
1. 简单来说，guice减轻了工厂和new的使用
2. 你可以简单的用@Inject俩替代new关键字
3. 为了更方便的重构、重用、单元测试
4. java 相关，类型安全、泛型、注解
5. Guice的愿景：使开发和debug更简单更迅速
6. Inversion of control 控制反转, "Hollywood principle", "injection"
7. 学习Guice的先决条件，现代java
   1. 注解
   2. 方法引用
   3. lambdas
   4. 面向对象原理
   5. 设计模式


* motivation
** 1. 现在我们有一个需求
#+BEGIN_SRC java
  public interface BillingService {

    /**
     ,* 尝试去charge账单
     ,*
     ,* @return a receipt（收据） of the transaction. If the charge was successful, the
     ,*      receipt will be successful. Otherwise, the receipt will contain a
     ,*      decline note describing why the charge failed.
     ,*/
    Receipt chargeOrder(PizzaOrder order, CreditCard creditCard);
  }
#+END_SRC
** 2. 我们的工作就是对上面的接口实现
#+BEGIN_SRC java
  public class RealBillingService implements BillingService {
    public Receipt chargeOrder(PizzaOrder order, CreditCard creditCard) {
      CreditCardProcessor processor = new PaypalCreditCardProcessor();
      TransactionLog transactionLog = new DatabaseTransactionLog();

      try {
        ChargeResult result = processor.charge(creditCard, order.getAmount());
        transactionLog.logChargeResult(result);

        return result.wasSuccessful()
            ? Receipt.forSuccessfulCharge(order.getAmount())
            : Receipt.forDeclinedCharge(result.getDeclineMessage());
       } catch (UnreachableException e) {
        transactionLog.logConnectException(e);
        return Receipt.forSystemFailure(e.getMessage());
      }
    }
  }
#+END_SRC
1. This code poses problems for modularity and testability.
2. 实现类写好后，我们需要一个FakeCreditCardProcessor来模拟信用卡付款时非常不方便
** 3. 工厂模式
工厂模式可以有效的做客户端和实现类的去耦
*** 工厂将真正的实现类封装起来，并且有改变的可能
#+BEGIN_SRC java
  public class CreditCardProcessorFactory {

    private static CreditCardProcessor instance;

    public static void setInstance(CreditCardProcessor processor) {
      instance = processor;
    }

    public static CreditCardProcessor getInstance() {
      if (instance == null) {
        return new SquareCreditCardProcessor();
      }

      return instance;
    }
  }
#+END_SRC
*** 用工厂创建代替直接用new调用构造方法
#+BEGIN_SRC java
  public class RealBillingService implements BillingService {
    public Receipt chargeOrder(PizzaOrder order, CreditCard creditCard) {
      CreditCardProcessor processor = CreditCardProcessorFactory.getInstance();
      TransactionLog transactionLog = TransactionLogFactory.getInstance();

      try {
        ChargeResult result = processor.charge(creditCard, order.getAmount());
        transactionLog.logChargeResult(result);

        return result.wasSuccessful()
            ? Receipt.forSuccessfulCharge(order.getAmount())
            : Receipt.forDeclinedCharge(result.getDeclineMessage());
       } catch (UnreachableException e) {
        transactionLog.logConnectException(e);
        return Receipt.forSystemFailure(e.getMessage());
      }
    }
  }
#+END_SRC
*** 并且可以很方便的写单元测试
#+BEGIN_SRC java
  public class RealBillingServiceTest extends TestCase {

      private final PizzaOrder order = new PizzaOrder(100);
      private final CreditCard creditCard = new CreditCard("1234", 11, 2010);
      //mock for test
      private final InMemoryTransactionLog transactionLog = new InMemoryTransactionLog();
      private final FakeCreditCardProcessor processor = new FakeCreditCardProcessor();

      @Override public void setUp() {
          // 这里就是工厂模式比直接构造模式方便的一点
          TransactionLogFactory.setInstance(transactionLog);
          CreditCardProcessorFactory.setInstance(processor);
      }

      @Override public void tearDown() {
          TransactionLogFactory.setInstance(null);
          CreditCardProcessorFactory.setInstance(null);
      }

      public void testSuccessfulCharge() {
          RealBillingService billingService = new RealBillingService();
          Receipt receipt = billingService.chargeOrder(order, creditCard);

          assertTrue(receipt.hasSuccessfulCharge());
          assertEquals(100, receipt.getAmountOfCharge());
          assertEquals(creditCard, processor.getCardOfOnlyCharge());
          assertEquals(100, processor.getAmountOfOnlyCharge());
          assertTrue(transactionLog.wasSuccessLogged());
      }
  }
#+END_SRC
*** 但上面的代码还是有问题的
因为工厂类中我们使用类变量来指向我们的具体实现，如果tearDown失败，可能会对其他测试产生影响，并且在并行情况下如果不同线程需要不同的实现，可能会出问题
*** 更大的问题还在后面
 依赖隐藏于code中，这导致
1. 如果我们要新加一个依赖项，比如要引入一个CreditCardFraudTracker，我们不得不重新跑一遍所有的测试，才能知道哪些测试因为依赖项的加入而不通过
2. 我们当然还有可能会忘记setInstance，而且这很有可能到尝试付款逻辑的时候才会被发现
3. 随着项目的增长，工厂模式来完成这项解耦这项工作显然会带来更大的负担
4. 你当然可以交给QA，但你其实可以做的更好
** 4. 依赖注入
**** 把依赖的具体实现当成构造器参数
#+BEGIN_SRC java
  public class RealBillingService implements BillingService {
    private final CreditCardProcessor processor;
    private final TransactionLog transactionLog;

    public RealBillingService(CreditCardProcessor processor,
        TransactionLog transactionLog) {
      this.processor = processor;
      this.transactionLog = transactionLog;
    }

    public Receipt chargeOrder(PizzaOrder order, CreditCard creditCard) {
      try {
        ChargeResult result = processor.charge(creditCard, order.getAmount());
        transactionLog.logChargeResult(result);

        return result.wasSuccessful()
            ? Receipt.forSuccessfulCharge(order.getAmount())
            : Receipt.forDeclinedCharge(result.getDeclineMessage());
       } catch (UnreachableException e) {
        transactionLog.logConnectException(e);
        return Receipt.forSystemFailure(e.getMessage());
      }
    }
  }
#+END_SRC
**** 当我们不再需要工厂模式的时候，去掉setup和tearDown
#+BEGIN_SRC java
  public class RealBillingServiceTest extends TestCase {

      private final PizzaOrder order = new PizzaOrder(100);
      private final CreditCard creditCard = new CreditCard("1234", 11, 2010);

      private final InMemoryTransactionLog transactionLog = new InMemoryTransactionLog();
      private final FakeCreditCardProcessor processor = new FakeCreditCardProcessor();

      public void testSuccessfulCharge() {
          RealBillingService billingService
              = new RealBillingService(processor, transactionLog);
          Receipt receipt = billingService.chargeOrder(order, creditCard);

          assertTrue(receipt.hasSuccessfulCharge());
          assertEquals(100, receipt.getAmountOfCharge());
          assertEquals(creditCard, processor.getCardOfOnlyCharge());
          assertEquals(100, processor.getAmountOfOnlyCharge());
          assertTrue(transactionLog.wasSuccessLogged());
      }
  }
#+END_SRC
不幸的是，客户端现在必须要引用具体的实现类
** 5. guice
依赖注入使代码更加模块化，更方便测试。guice使依赖注入更易写。下面是使用guice写依赖注入的流程
**** 1. map interface to implements。
可以实现Module接口来声明一个配置类，用来存接口到具体实现的映射关系
#+BEGIN_SRC java
  public class BillingModule extends AbstractModule {
    @Override
    protected void configure() { //里面的内容相当于配置项，接口映射到实现类
      bind(TransactionLog.class).to(DatabaseTransactionLog.class);
      bind(CreditCardProcessor.class).to(PaypalCreditCardProcessor.class);
      bind(BillingService.class).to(RealBillingService.class);
    }
  }
#+END_SRC
**** 2. 在那些依赖于我们声明的具体实现 的类构造上使用@Inject注解
Guice会检查被注解的构造器，并帮构造器安排具体参数
#+BEGIN_SRC java

  public class RealBillingService implements BillingService {
      private final CreditCardProcessor processor;
      private final TransactionLog transactionLog;
      // 这里注解RealBillingService的构造器。以委托Guice去找到合适的参数
      @Inject
      public RealBillingService(CreditCardProcessor processor,
                                TransactionLog transactionLog) {
          this.processor = processor;
          this.transactionLog = transactionLog;
      }

      public Receipt chargeOrder(PizzaOrder order, CreditCard creditCard) {
          try {
              ChargeResult result = processor.charge(creditCard, order.getAmount());
              transactionLog.logChargeResult(result);

              return result.wasSuccessful()
                  ? Receipt.forSuccessfulCharge(order.getAmount())
                  : Receipt.forDeclinedCharge(result.getDeclineMessage());
          } catch (UnreachableException e) {
              transactionLog.logConnectException(e);
              return Receipt.forSystemFailure(e.getMessage());
          }
      }
#+END_SRC
**** 3. 最后我们将一切打包在Injector中
#+BEGIN_SRC java
  public static void main(String[] args) {
      Injector injector = Guice.createInjector(new BillingModule());
      // 我们在这里获得BillingService的具体实现，
      // 而具体实现也是有依赖的，通过注解构造器和配置类的配合，帮助具体实现也找到它的正确依赖
      BillingService billingService = injector.getInstance(BillingService.class);
      ...
    }
#+END_SRC

* MentalModel

** Key
接口到实现的map的key,特意声明一下它是为了方便使用，可以通过语义获得具体key-接口

*** 最简实践
#+BEGIN_SRC java
  // 通过类型获得key
  Key<String> databaseKey = Key.get(String.class);
#+END_SRC

*** 同类不同实例
#+BEGIN_SRC java
  Key<String> englishGreetingKey = Key.get(String.class, English.class);
  Key<String> spannishGreetingKey = Key.get(String.class, Spanish.class);
#+END_SRC

** provider
相当于工厂

*** 接口
#+BEGIN_SRC java
  interface Provider<T> {
    /** Provides an instance of T.**/
    T get();
  }
#+END_SRC
大多数工程都不直接实现Provider接口，他们用Module来配置injector，然后injector在内部创建provider

*** 两种创建provider的方式
#+BEGIN_SRC java
  class DemoModule extends AbstractModule {
    protected void configure() {//通过配置在injector来使用provider
      bind(Key.get(String.class, Message.class)).toInstance("hello world");
    }
    //声明provider方法
    @Provides
    @Count
    static Integer provideCount() {
      return 3;
    }
  }
#+END_SRC
Provider<String> that returns the message "hello world"
Provider<Integer> that calls the provideCount method and returns 3

*** 可以把Guice想象成一个da的map，Map<key<?>,Provider<?> 
当然它不是类型安全的，因为通配符并没有匹配

*** Modules
**** Guice的配置，两种方式添加配置
1. @Provider
2. DSL(Domain Specific language)
**** Map的操作方式
| Guice DSL syntax	         | Mental model                                            | 含义
| bind(key).toInstance(value)      | 	map.put(key, () -> value)                       | (instance binding)        |
| bind(key).toProvider(provider)   | 	map.put(key, provider)                          | (provider binding)        |
| bind(key).to(anotherKey)         | 	map.put(key, map.get(anotherKey))               | (linked binding)          |
| @Provides Foo provideFoo() {...} | 	map.put(Key.get(Foo.class), module::provideFoo) | (provider method binding) |
**** 不是从Guice这个大map中取，而是声明我们想要的依赖
1. 这是依赖注入的精髓
2. 这颠覆大多数人对code的看法
3. it's a more declarative model rather than an imperative one. why IoC
**** Dependencies form a graph
1. 当要注入的依赖还依赖于别的依赖时，Guice 递归注入

** module
fast and side effect free
用来代替配置文件

*** 不要在module里来做过重的操作
1. 连接数据库
2. 启动一个http服务

**** 这可能会带来问题
1. 连接泄露，module可能并没有stop连接的操作
2. module应该是对测试友好的，持有太多东西，测试变困难
3. 考虑继承，module是可继承重写的

* core Guice concepts
1. @Injuect constructor
2. Guice modules

* scope
1. 默认的，guice每次提供的依赖都是一个新的实例。
2. 可以使用scope来让guice记住某个实例，以遍复用它
3. 你应该考虑实例的声明周期，然后在必要情况下定义合适的scope来复用实例同时又能及时回收它

** 优先级
在类上注解的scope和provider上注解的scope的优先级低于调用bind()方法的优先级，这样设计以便在bind动作发生时调整scope。bind时你可以任意调整scope，甚至是使用Scope.NO_SCOPE去掉他的scope
* question 
** 当一个依赖的实现有很多参数的，其中部分参数从配置读，怎么办
** 插件化rocksdb时，guice如何管理rockddb的依赖
* bindings
** 集合绑定
集合绑定：可在不同的Module内向同一个集合分别去绑定自己所要支持的内容，当然喽也可以在同一个Module内

