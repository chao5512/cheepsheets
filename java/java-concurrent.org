#+title: java高并发
* 并发工具类
** CountDownLatch
+ latch 门栓，阀门
+ 一个线程等待其他线程完成某些操作时可以使用，比join更灵活，join只能等待其他线程执行完了。
+ 只能用一次，不能重复利用
***  使用范式：
#+BEGIN_SRC java
  class Driver { // ...
     void main() throws InterruptedException {
       CountDownLatch startSignal = new CountDownLatch(1);
       CountDownLatch doneSignal = new CountDownLatch(N);

       for (int i = 0; i < N; ++i) // create and start threads
         new Thread(new Worker(startSignal, doneSignal)).start();

       doSomethingElse();            // don't let run yet
       startSignal.countDown();      // let all threads proceed
       doSomethingElse();
       doneSignal.await();           // wait for all to finish
     }
   }

   class Worker implements Runnable {
     private final CountDownLatch startSignal;
     private final CountDownLatch doneSignal;
     Worker(CountDownLatch startSignal, CountDownLatch doneSignal) {
       this.startSignal = startSignal;
       this.doneSignal = doneSignal;
     }
     public void run() {
       try {
         startSignal.await();
         doWork();
         doneSignal.countDown();
       } catch (InterruptedException ex) {} // return;
     }

     void doWork() { ... }
   }
#+END_SRC
** CyclicBarrier
+ 见名知意，可以循环使用
+ 一批的多个线程互相等待（await）另外的线程执行到某个点。全部到达这个集合点后，可以触发一次barrierAction
+ 可以循环使用，即任意一批线程走了之后，新来的线程还要等到汇成一批才可以走
+ 使用condition实现，开销是上下文切换。
+ 应用场景
  1. 使迭代算法并行化，加速。
  2. 测试中模拟高并发
** Exchanger
+ 成对使用，多余两个则无法预测行为
+ 使用exchange方法来完成两个搭档线程交换数据
+ 可以用exchanger来完成双缓冲
+ 注意，其中一个错误退出，另一个可能会一直处于等待的状态
** Semaphore
+ 用来做限流，搭配无界队列使用
+ 当限流为1的时候，相当于互斥锁
** 显示锁
*** Lock
*** ReentrantLock
*** ReadWriteLock
+ 优点，读写分离
+ 缺点，写饥饿
* Unsafe
+ 使用allocateInstance可以绕过某个对象的初始化
+ 通过直接写内存（从某个偏移量开始，覆盖原值）的方式来修修改一个对象。
+ 通过Unsafe.defineClass可以加载类
* 线程管理
** 线程池
*** 线程的停止
[[https://blog.csdn.net/u012168222/article/details/52790400][比较三种停止线程的方法]]
* 并发设计模式
** 单例模式
*** 步骤
1. 构造函数私有化
2. private static 引用 = （懒汉模式和饿汉模式不同）
3. public static synchronized 引用 getInstance()
*** 演进过程
**** 1. 饿汉式
+ 缺点：can't lazy load。
#+BEGIN_SRC java
  public class Singleton1 {
      private static Singleton1 singleton1 = new Singleton1();
      //构造函数私有化
      private Singleton1(){}
      //只有一个singleton 不需要同步
      public static Singleton1 getSingleton1(){
          return singleton1;
      }
  }
#+END_SRC
**** 2. 懒汉式
+ 缺点：线程不安全。可能生成多个单例对象
#+BEGIN_SRC java

  public class Singleton2 {
      private static Singleton2 singleton2 = null;
      private Singleton2(){}
      //做单例==null判断时，有可能多个线程都判断等于空，创建多个单例对象，虽然最后一个会覆盖前面所有的，但创建了多余对象
      public static synchronized Singleton2 getSingleton2(){
          if (Singleton2.singleton2 == null){
              Singleton2.singleton2 = new Singleton2();
          }
          return Singleton2.singleton2;
      }
  }
#+END_SRC
**** 3. 懒汉式+锁
+ 没有利用上读多写少的特性
#+BEGIN_SRC java
  public class Singleton3 {
      private static Singleton3 instance = null;
      private Singleton3(){}
      //缺点: 浪费，明显不为空的时候多呀    
      public static synchronized Singleton3 getInstance(){
          if(null == Singleton3.instance){
              Singleton3.instance = new Singleton3();
          }
          return Singleton3.instance;
      }
  }
#+END_SRC
**** 4. 双重检查
+ 利用读多写少的特性
+ 一次检查保证效率，一次检查保证不出现2的情况
+ 缺点，可能会导致空指针异常。
#+BEGIN_SRC java
  public class Singleton4 {
      private Singleton4(){}
      private static Singleton4 instance = null;

      public static Singleton4 getInstance(){
          //1. 跳过大多数非空情况，保证速度
          if(null == Singleton4.instance){
              synchronized (Singleton4.class){
                  //2. 保证正确性，当第一个进入到这里的线程new了这个单例后
                  // 其他可以进来的线程再进来可以看到实例已经非空了
                  //3. 缺点：有可能会导致空指针异常，第一个线程看到实例为空，去创建实例
                  // 还没有等到实例初始化完成（例如还有外部引用的对象没有初始化）就return了，释放锁，这个时候等待锁的另外一个线程看到实例不为空
                  // 直接去使用了，可是这时可能还未初始化完成。
                  if(null == Singleton4.instance){
                      Singleton4.instance = new Singleton4();
                  }
              }
          }
          return Singleton4.instance;
      }
  }
#+END_SRC
**** 5. volitale的双重检查
+ 保证了其他线程看到之前线程创建的实例时，实例确实是初始化完成了
#+BEGIN_SRC java
  public class Singleton5 {
      private Singleton5(){}
      private static volatile Singleton5 instance = null;

      public static Singleton5 getInstance(){
          //1. 跳过大多数非空情况，保证速度
          if(null == Singleton5.instance){
              synchronized (Singleton5.class){
                  //2. 保证正确性，当第一个进入到这里的线程new了这个单例后
                  // 其他可以进来的线程再进来可以看到实例已经非空了
                  if(null == Singleton5.instance){
                      Singleton5.instance = new Singleton5();
                  }
              }
          }
          return Singleton5.instance;
      }
  }
#+END_SRC
**** 6. 利用内部类的懒加载特性的单例
+ 利用类的初始化保证单例唯一(针对2)且有（针对3）
+ 利用内部类的懒加载机制完成单例的懒加载(针对1)
#+BEGIN_SRC java
  public class Singleton6 {
      private Singleton6(){}

      private static class Singleton6Holder{
          private static final Singleton6 instance = new Singleton6();
      }

      public static Singleton6 getInstance(){
          return Singleton6Holder.instance;
      }
  }
#+END_SRC
**** 7. 枚举
+ 用枚举来保证安全性
+ 用final保证安全发布
+ 用内部枚举保证懒加载
#+BEGIN_SRC java
  public class Singleton7 {
      private Singleton7(){}

      private enum Singleton7Holder{
          INSTANCE;
          private final Singleton7 instance;
          Singleton7Holder(){
              instance = new Singleton7();
          }
      }
      public static Singleton7 getInstance(){
          return Singleton7Holder.INSTANCE.instance;
      }
  }
#+END_SRC
*** 是否加final关键字
+ [[https://blog.csdn.net/qq_39986274/article/details/79215311][从释放资源角度讲]]
+ [[https://blog.csdn.net/qq_37347341/article/details/77740215][从安全发布角度讲]]
  
** 观察者模式
主题发生改变的时候，通知观察者
*** 角色
1. subject ： 主题，可被观察者，具有一些可以被观察的属性，同时维护了订阅当前主题的所有observer
2. abstract observer ： 观察者的抽象定义，提供给主题一个通知接口，主题可以选择一个时间来调用观察者的接口
3. concrete observer : 具体的观察者，被通知，做具体响应
*** 使用观察者模式监控线程生命周期
** 多线程读写分离
waitset  线程间通信
*** 分析
| ++    | read | write |
| read  | y    | n     |
| write | n    | n     |
*** 实现
1. 根据分析中的情况记录
   1. waiting read 的线程数 ： 可以看读的拥挤程度(没看出来啥用)
   2. waiting write 的线程数 ： 用来缓解写饥饿
   3. reading 的线程数  ： 用来读写控制
   4. writing 的线程数  ： 用来读写控制
2. 写等待的条件，存在正在读的或者正在写的，具体为: reading > 0 || writing > 0
3. 读等待的条件，存在正在写的，具体为 writing > 0 ,这里为了避免写饥饿，附加一个或条件(preferWriting && waiting write > 0)
** Two-Phase Termination 

* waitset
+ 可以去OpenJdk看hotspot怎么实现的？链表实现的
* 缓存一致性协议
** 核心思想
1. 当cpu写入数据的时候,如果发现该变量被共享(也就是说,在其他cpu中也存在该变量的副本),会发出一个信号,通知其他cpu该变量的缓存无效，当其他cpu访问该变量的时候,重新到主内存进行获取
* JMM 
用来简化理解
+ 工作内存可以理解为高速缓存
+ 主内存
* happen-before relationship java天生保证的的有序关系
* volitale关键字
** 使用场景
1. 状态标志
* inbox 
** 实现两个线程安全的累加器的
1. synchronized
2. lock
3. cas，使用AtomicXXX原子类来帮助完成
4. unsafe
* 抽象
** 任务
*** thread
**** doc
+ jvm启动时候，会有一个线程去调用main()方法
+ 子线程的优先级默认等于父线程的优先级
+ 子线程只有在父线程是Daemon线程的时候，才是Daemon线程，daemon线程中启动的线程默认也是daemon线程，daemon方法需要在start之前调用
+ 线程停止条件
  + 调用了Runtime.exit()，并且the security manager允许了退出
  + 所有非daemon线程执行完毕(返回或者抛出异常)
+ daemon线程的应用，比如心跳线程，垃圾清理线程等等，随着你的应用线程的退出同时退出
**** state machine
#+DOWNLOADED: https://www.uml-diagrams.org/examples/state-machine-example-java-6-thread-states.png @ 2019-12-08 18:28:57
[[file:%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/2019-12-08_18-28-55_state-machine-example-java-6-thread-states.png]]
**** api
***** join
用wait()和notify()实现的
***** interrupt
使用interrupt优雅的停止线程
1. 设置一个自定义的标志位，volitile类型的，不适用interrupt的中断标志，是怕吞没标志位
2. 每次运行业务代码之前，while检查一下标志位，该停则停
3. 为了尽可能的中断阻塞，停止线程的时候除了更改标志位的值，还要发一次中断请求。
4. 不响应中断的阻塞方法，有一招是在线程A中再创建一个Daemon线程。然后使用标志位去停止A，A作为应用线程停止了，那么A的Daemon线程，真正的业务逻辑线程就停止了
*** Runnable
**** doc
如果只是需要重写run方法，而不必改动thread类的其他方法，那么应该使用runnable
*** Callable
可以返回结果或者抛出异常的任务
*** FutureTask
1. 可取消的异步任务
2. 确保任务只run一次
** 任务结果
*** Future
1. 用来存储异步计算的结果
**** 角色
1. Future
2. FutureTask
3. FutureService
**** methods
1. get() //阻塞等待找回结果
2. get(timeTowait) //阻塞一短时间来找回结果，到时没拿到抛出超时异常
3. cancel()
4. boolean cancel(boolean mayInterruptIfRunning)  //尝试取消任务
   1) 对已经complet和已经cancel的任务调用cancel会失败
   2) 如果task还未开始，那么它将不会被开始
   3) 如果已经开始，根据参数来决定要不要尝试中断该task
** 任务执行
*** Executor
接受任务并执行
**** 用处
1. 用来避免显式的创建线程
2. 好处是将task定义和task执行的具体逻辑(包括线程调度)分开
**** 不强制要求提交上来的任务是异步执行的
#+BEGIN_SRC java
  //最简单的Executor实现
  // 相当于直接在caller`s thread中执行
  class DirectExecutor implements Executor {
      //提交上来的任务直接执行，可以不是异步的
      public void execute(Runnable r) {
       r.run();
     }
   }
#+END_SRC
**** 但更常见的是异步于调用者线程执行
#+BEGIN_SRC java

  class ThreadPerTaskExecutor implements Executor {
      public void execute(Runnable r) {
          new Thread(r).start();
      }
  }
       
#+END_SRC
**** 子接口 ExecutorService
提供了shutdown 管理和产出future结果的方法
***** methods
1. shutDownNow() //尽力终止，对不响应中断的任务不保证一定能终止
   1) 返回还未开始执行的任务
   2) 不等待已经执行的任务，如果需要等待用awaitTermination
**** Excutors
ExecutorService 的工厂类
* ThreadPoolExecutor
1. 可配置为几种线程池的用来执行提交任务的ExecutorService
2. 通常使用Executors 工厂来配置

** execute
提task到线程池
1. 如果池中running的线程数尚未到达corePoolSize，则会为提交的task创建一个新的线程并尝试start。创建线程的时候还会在检查一遍，以防在不应该创建出线程的时候创建（具体runState和workerCount）
2. 当task成功入队(看一下等待队列)后，double-check for
   1) 是否创建线程，因为有的线程可能挂掉了。
   2) 进入这个方法后，是否有pool shutdown的命令下来
3. 如果不能成功入队，尝试创建一个新的线程，如果失败了，那就表示pool已经饱和了，那么拒绝这个task

** execute和submit的区别
1. execute是Executor的方法
2. submit是AbstractExecutorService对execute方法的包装，用来传出future。
** acl
*** workerCount 
*** runState
1. RUNNING：接受新的task或者处理队列里的task
2. SHUTDOWN：不接受新的task，但是处理队列的task
3. STOP : 不接受新task，不处理队列任务，并且向正在处理的任务发中断请求
4. TIDYING ： 所有task已经执行完成，并且workerCount为0
5. TERMINATED ： terminated()方法执行完了
** shutDownNow

* ThreadLocal

