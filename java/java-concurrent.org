#+title: java高并发
* 并发工具类
** CountDownLatch
+ latch 门栓，阀门
+ 一个线程等待其他线程完成某些操作时可以使用，比join更灵活，join只能等待其他线程执行完了。
+ 只能用一次，不能重复利用
***  使用范式：
#+BEGIN_SRC java
  class Driver { // ...
     void main() throws InterruptedException {
       CountDownLatch startSignal = new CountDownLatch(1);
       CountDownLatch doneSignal = new CountDownLatch(N);

       for (int i = 0; i < N; ++i) // create and start threads
         new Thread(new Worker(startSignal, doneSignal)).start();

       doSomethingElse();            // don't let run yet
       startSignal.countDown();      // let all threads proceed
       doSomethingElse();
       doneSignal.await();           // wait for all to finish
     }
   }

   class Worker implements Runnable {
     private final CountDownLatch startSignal;
     private final CountDownLatch doneSignal;
     Worker(CountDownLatch startSignal, CountDownLatch doneSignal) {
       this.startSignal = startSignal;
       this.doneSignal = doneSignal;
     }
     public void run() {
       try {
         startSignal.await();
         doWork();
         doneSignal.countDown();
       } catch (InterruptedException ex) {} // return;
     }

     void doWork() { ... }
   }
#+END_SRC
** CyclicBarrier
+ 见名知意，可以循环使用
+ 一批的多个线程互相等待（await）另外的线程执行到某个点。全部到达这个集合点后，可以触发一次barrierAction
+ 可以循环使用，即任意一批线程走了之后，新来的线程还要等到汇成一批才可以走
+ 使用condition实现，开销是上下文切换。
+ 应用场景
  1. 使迭代算法并行化，加速。
  2. 测试中模拟高并发
** Exchanger
+ 成对使用，多余两个则无法预测行为
+ 使用exchange方法来完成两个搭档线程交换数据
+ 可以用exchanger来完成双缓冲
+ 注意，其中一个错误退出，另一个可能会一直处于等待的状态
** Semaphore
+ 用来做限流，搭配无界队列使用
+ 当限流为1的时候，相当于互斥锁
** 显示锁
*** Lock
*** ReentrantLock
*** ReadWriteLock
+ 优点，读写分离
+ 缺点，写饥饿
* Unsafe
+ 使用allocateInstance可以绕过某个对象的初始化
+ 通过直接写内存（从某个偏移量开始，覆盖原值）的方式来修修改一个对象。
+ 通过Unsafe.defineClass可以加载类
* 线程管理
** 线程池
*** 线程的停止
[[https://blog.csdn.net/u012168222/article/details/52790400][比较三种停止线程的方法]]
* 并发设计模式
** 单例模式
*** 步骤
1. 构造函数私有化
2. private static 引用 = （懒汉模式和饿汉模式不同）
3. public static synchronized 引用 getInstance()
*** 演进过程
**** 1. 饿汉式
+ 缺点：can't lazy load。
#+BEGIN_SRC java
  public class Singleton1 {
      private static Singleton1 singleton1 = new Singleton1();
      //构造函数私有化
      private Singleton1(){}
      //只有一个singleton 不需要同步
      public static Singleton1 getSingleton1(){
          return singleton1;
      }
  }
#+END_SRC
**** 2. 懒汉式
+ 缺点：线程不安全。可能生成多个单例对象
#+BEGIN_SRC java

  public class Singleton2 {
      private static Singleton2 singleton2 = null;
      private Singleton2(){}
      //做单例==null判断时，有可能多个线程都判断等于空，创建多个单例对象，虽然最后一个会覆盖前面所有的，但创建了多余对象
      public static synchronized Singleton2 getSingleton2(){
          if (Singleton2.singleton2 == null){
              Singleton2.singleton2 = new Singleton2();
          }
          return Singleton2.singleton2;
      }
  }
#+END_SRC
**** 3. 懒汉式+锁
+ 没有利用上读多写少的特性
#+BEGIN_SRC java
  public class Singleton3 {
      private static Singleton3 instance = null;
      private Singleton3(){}
      //缺点: 浪费，明显不为空的时候多呀    
      public static synchronized Singleton3 getInstance(){
          if(null == Singleton3.instance){
              Singleton3.instance = new Singleton3();
          }
          return Singleton3.instance;
      }
  }
#+END_SRC
**** 4. 双重检查
+ 利用读多写少的特性
+ 一次检查保证效率，一次检查保证不出现2的情况
+ 缺点，可能会导致空指针异常。
#+BEGIN_SRC java
  public class Singleton4 {
      private Singleton4(){}
      private static Singleton4 instance = null;

      public static Singleton4 getInstance(){
          //1. 跳过大多数非空情况，保证速度
          if(null == Singleton4.instance){
              synchronized (Singleton4.class){
                  //2. 保证正确性，当第一个进入到这里的线程new了这个单例后
                  // 其他可以进来的线程再进来可以看到实例已经非空了
                  //3. 缺点：有可能会导致空指针异常，第一个线程看到实例为空，去创建实例
                  // 还没有等到实例初始化完成（例如还有外部引用的对象没有初始化）就return了，释放锁，这个时候等待锁的另外一个线程看到实例不为空
                  // 直接去使用了，可是这时可能还未初始化完成。
                  if(null == Singleton4.instance){
                      Singleton4.instance = new Singleton4();
                  }
              }
          }
          return Singleton4.instance;
      }
  }
#+END_SRC
**** 5. volitale的双重检查
+ 保证了其他线程看到之前线程创建的实例时，实例确实是初始化完成了
#+BEGIN_SRC java
  public class Singleton5 {
      private Singleton5(){}
      private static volatile Singleton5 instance = null;

      public static Singleton5 getInstance(){
          //1. 跳过大多数非空情况，保证速度
          if(null == Singleton5.instance){
              synchronized (Singleton5.class){
                  //2. 保证正确性，当第一个进入到这里的线程new了这个单例后
                  // 其他可以进来的线程再进来可以看到实例已经非空了
                  if(null == Singleton5.instance){
                      Singleton5.instance = new Singleton5();
                  }
              }
          }
          return Singleton5.instance;
      }
  }
#+END_SRC
**** 6. 利用内部类的懒加载特性的单例
+ 利用类的初始化保证单例唯一(针对2)且有（针对3）
+ 利用内部类的懒加载机制完成单例的懒加载(针对1)
#+BEGIN_SRC java
  public class Singleton6 {
      private Singleton6(){}

      private static class Singleton6Holder{
          private static final Singleton6 instance = new Singleton6();
      }

      public static Singleton6 getInstance(){
          return Singleton6Holder.instance;
      }
  }
#+END_SRC
**** 7. 枚举
+ 用枚举来保证安全性
+ 用final保证安全发布
+ 用内部枚举保证懒加载
#+BEGIN_SRC java
  public class Singleton7 {
      private Singleton7(){}

      private enum Singleton7Holder{
          INSTANCE;
          private final Singleton7 instance;
          Singleton7Holder(){
              instance = new Singleton7();
          }
      }
      public static Singleton7 getInstance(){
          return Singleton7Holder.INSTANCE.instance;
      }
  }
#+END_SRC
*** 是否加final关键字
+ [[https://blog.csdn.net/qq_39986274/article/details/79215311][从释放资源角度讲]]
+ [[https://blog.csdn.net/qq_37347341/article/details/77740215][从安全发布角度讲]]
  
** 
* inbox 
** 实现两个线程安全的累加器的
1. synchronized
2. lock
3. cas，使用AtomicXXX原子类来帮助完成
4. unsafe
