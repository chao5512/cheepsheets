#+title: java 并发
* inbox
+ JvM中的同步是基于进入与退出监视器对象(管程对象)( Monitor)来实现的,每个对象实例都会有一个 Monitor对象, Monitor对象会和Java对象一同创建并销毁。 Monitor对象是由c++来实现的。
+ 当多个线程同时访问一段同步代码时,这些线程会被放到一个 EntryList集合中,处于阻塞状态的线程都会被放到该列表当中。接下来,当线程获取到对象的 Monitor时, Monitor是依赖于底层操作系统的 mutexlock来实现互斥的,线程获取 mutex成功,则会持有该 mutex,这时其他线程就无法再获取到该 mutex。
+ 如果线程调用了wai方法,那么该线程就会释放掉所持有的 mutex,并且该线程会进入到 Waitset集合(等待集合)中,等待下一次被其他线程调用 notify/ notifyall唤醒。如果当前线程顺利执行完毕方法,那么它也会释放掉所持有的 mutex
+ 总结一下:同步锁在这种实现方式当中,因为 Monitor是依赖于底层的操作系统实现,这样就存在用户态与内核态之间的切换,所以会增加性能开销。
+ 通过对象互斥锁的概念来保证共享数据操作的完整性。每个对象都对应于一个可称为"互斥锁"的标记,这个标记用于保证在任何时刻,只能有一个线程访问该对象。
+ 那些处于 EntryList与 Waitset中的线程均处于阻塞状态,阻塞操作是由操作系统来完成的,在linux下是通过 pthread_mutex_lock函数实现的。
+ 线程被阻塞后使会进入到内核调度状态,这会导致系统在用户态与内核态之间来回切换,严重影响锁的性能。
+ 解决上述问题的办法便是自旋(spin)。其原理是:当发生对 Monitor的争用时,若 Owner能够在很短的时间内释放掉锁,则那些正在争用的线程就可以稍微等待一下(即所谓的自旋),在 Owner线程释放锁之后,争用线程可能会立刻获取到锁,从而避免了系统阻塞。不过,当 Owner运行的时间超过了临界值后,争用线程自旋一段时间后依然无法获取到锁,这时争用线程则会停止自旋而进入到阻塞状态。所以总体的思想是:先自旋,不成功再进行阻塞,尽量降低阻塞的可能性,这对那些执行时间很短的代码块来说有极大的性能提升。显然,自旋在多处理器(多核心)上才有意义。
+ 锁和线程应该分开看
* 互斥锁的属性:
1. PTHREAD_MUTEX_TIMED_NP:这是缺省值,也就是普通锁。当一个线程加锁以后,其余请求锁的线程将会形成一个等待队列,并且在解锁后按照优先级获取到锁。这种策略可以确保资源分配的公平性。
2. PTHREAD_MUTEX_RECURSIVE_NP:嵌套锁。允许一个线程对同一个锁成功获取多次,并通过 unlock解锁。如果是不同线程请求,则在加锁线程解锁时重新进行竟争。
3. PTHREAD_MUTEX_ERRORCHECK_NP:检错锁。如果一个线程请求同一个锁,则返回 EDEADLK,否则与 PTHREAD_MUTEX_TIMED_NP类型动作相同,这样就保证了当不允许多次加锁时不会出现最简单情况下的死锁。
4. PTHREAD_MUTEX_ADAPTIVE_NP:适应锁,动作最简单的锁类型,仅仅等待解锁后重新竞争

* synchronized
1. 在JDK1.5之前,我们若想实现线程同步,只能通过 synchronized关键字这一种方式来达成;底层,Java也是通过 synchronized关键字来做到数据的原子性维护的; synchronized关键字是JVM实现的一种内置锁,从底层角度来说,这种锁的获取与释放都是由JVM帮助我们隐式实现的。
2. 从JDK1.5开始,并发包引入了Lock锁,Lock同步锁是基于 *Java来实现的*,因此锁的获取与释放都是通过Java代码来实现与控制的;然而, synchronized是基于底层操作系统的 Mutex lock来实现的,每次对锁的获取与释放动作都会带来用户态与内核态之间的切换,这种切换会极大地增加系统的负担;在并发量较高时,也就是说锁的竞争比较激烈时, synchronized锁在性能上的表现就非常差。
3. 从JDK1.6开始, synchronized锁的实现发生了很大的变化;JVM引入了相应的优化手段来提升 synchronized锁的性能,这种提升涉及到偏向锁、轻量级锁及重量级锁等,从而减少锁的竞争所带来的用户态与内核态之间的切换;
** java 对象头
+ 从JDK1.6开始,对象实例在堆当中会被划分为三个组成部分:对象头、实例数据与对齐填充。
+ 对象头主要也是由3块内容来构成:
  1. Mark Word
  2. 指向类的指针
  3. 数组长度
+ 其中 Mark Word(它记录了对象、锁及垃圾回收相关的信息,在64位的JM中,其长度也是64bit)的位信息包括了如下组成部分:
  1. 无锁标记
  2. 偏向锁标记
  3. 轻量级锁标记
  4. 重量级锁标记
  5. Gc标记
** synchronized的优化
+ 对于 synchronized锁来说,锁的升级主要都是通过 Mark Word中的锁标志位与是否是偏向锁标志位来达成的; synchronized关键字所对应的锁都是先从偏向锁开始,随着锁竟争的不断升级,逐步演化至轻量级锁,最后则变成了重量级锁。对于锁的演化来说,它会经历如下阶段：
  + 无锁→>偏向锁->轻量级锁->重量级锁
  + 自旋锁属于轻量级锁的一种
  + 偏向锁:针对于一个线程来说的,它的主要作用就是优化同一个线程多次获取一个锁的情况;如果一个 synchronized方法被一个线程访问,那么这个方法所在的对象就会在其 Mark Word中的将偏向锁进行标记,同时还会有一个字段来存储该线程的工D;当这个线程再次访问同一个 synchronized方法时,它会检查这个对象的 Mark Word的偏向锁标记以及是否指向了其线程工D,如果是的话,那么该线程就无需再去进入管程( Monitor)了,而是直接进入到该方法体中。
  + 轻量级锁：若第一个线程已经获取到了当前对象的锁,这时第二个线程又开始尝试争抢该对象的锁,由于该对象的锁已经被第一个线程获取到,因此它是偏向锁,而第二个线程在争抢时,会发现该对象头中的 Mark Wordl已经是偏向锁,但里面存储的线程D并不是自己(是第一个线程),那么它会进行cAs( Compare and Swap),从而获取到锁,这里面存在两种情况:
    + 获取锁成功:那么它会直接将 Mark Word中的线程ID由第一个线程变成自己(偏向锁标记位保持不变),这样会保持的偏向锁的状态
    + 获取锁失败:则表示这时可能会有多个线程同时在尝试争抢该对象的锁,那么这时偏向锁就会进行升级,开级为轻量级锁 
  + 自旋锁:若自旋失败(依然无法获取到锁),那么锁就会转化为重量级锁,在这种情况下,无法获取到锁的线程都会进入到 Monitor(即内核态)
* 锁优化
+ 锁消除 : 局部变量上加锁，编译器不会去掉这个锁，JIT才会，具体的：JIT编译器( Just In Time编译器)可以在动态编译同步代码时,使用一种叫做逃逸分析的技术,来通过该项技术判别程序中所使用的锁对象是否只被一个线程所使用,而没有散布到其他线程当中;如果情况就是这样的话,那么JIT编辑器在编译这个同步代码时就不会生成 synchronized关键字所标识的锁的申请与释放机器码,从而消除了锁的使用流程。
#+BEGIN_SRC java
  public class MyTest4 {
      //private Objectobject = new object();
      public void method(){
          Object object = new Object();
          synchronized (object){
              System.out.println( "hello world");
          }
      }
  }
#+END_SRC
+ 锁粗话也是JIT执行的锁粗化
* Lock
+ 读写锁和锁没有直接的层次关系
** 与synchronized比较
1. 更灵活
2. 有trylock，获取不到锁的时候可以干别的事，最简单的，可以自旋
3. 可中断，可以允许别的线程对这个等待线程的中断
* TODO 读写锁
- State "TODO"       from              [2019-11-25 Mon 16:49]
* TODO hand-over-hand
- State "TODO"       from              [2019-11-25 Mon 16:51]
* TODO chain-locking
- State "TODO"       from              [2019-11-25 Mon 16:52]
